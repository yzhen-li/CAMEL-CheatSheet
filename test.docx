DeepCode: Machine Learning on Source Code Quality Assurance
IC: Yi Zhen, Yang Yang, 
Manager: Tie Wang, Bo Long

This doc is to summarize the recent progress on artificial intelligence and machine learning on software engineering. Under the umbrella of AIOps and AI Quality, our focus is on SCQA (source code quality assurance), which is in line with data quality and model quality our AIQF team has been working on. 

Portal (go/DeepCode)	2
Microsoft AIOps Initiatives (Confidential)	2
Glossary	2
Machine Learning on Source Code (MLonCode)	2
Summary	2
Demo	4
Resources	4
Literature Review	4
Research Groups	4
Product	4
People	4
Machine Learning on Testing (MLonTest)	4
Summary	4
Resources	5
Course	5
Research Groups	5
Articles	5
Products	5
LinkedIn Resources	6
Related Works	6
MLOps	6
Proposal	6
References	7
Portal (go/DeepCode)
Microsoft AIOps Initiatives (Confidential)
Abstract
Slides
AIOps Pillars
AI for Infra/System
AI for DevOps
AI for Customers
AI Quality Pillars
Data quality
Model quality
Code quality
Devops lifecycle
Requirement
Design 
implementation/code
Test
Deployment
maintenance
Glossary
DevOps: DevOps is an application development culture in which software developers collaborate with operations to ensure that the software is deployed into production with a minimal number of errors. 
AIOps
MLOps
Machine Learning on Source Code (MLonCode)
Leveraging machine learning to find statistical patterns in large corpora of code and to drive new software development tools and program analyses.
Summary
Area
topic
applications
Code Search and Recommendation
Code to Code search 


Learning to rank code examples (Niu, Keivanloo, and Zou 2017)
Natural language to code search 
Bimodal modeling between source code and natural language (Miltos Allamanis et al. 2015)
Code Generation
Code migration
Python2 to Python3 (Aggarwal, Salameh, and Hindle 2015)
Idiom mining
Find idiom of code (Miltiadis Allamanis and Sutton 2014)
documentation
Auto documentation from code (Barone and Sennrich 2017)
Code completion
Python code suggestion (Bhoopchand et al. 2016)
Code Repair


Detect bugs 
Detect bugs (Ray et al. 2016)
Detect code vulnerabilities 
Code vulnerability detection (Russell et al. 2018)
Code smell detection (Fontana et al. 2016)
Repair generation
Patch generation (Long and Rinard 2016)
Code Review 
Evaluate code quality
Evaluate code contribution (Hellendoorn, Devanbu, and Bacchelli 2015)
Sentiment analysis
Benchmark study (Novielli, Girardi, and Lanubile 2018)
Code summarization
Code summarization (Miltiadis Allamanis, Peng, and Sutton 2016)
Code2seq
code2vec
Code clone detection
Code clone detection (Büch and Andrzejak 2019)
Code optimization
Superoptimize code (Bunel et al. 2016)
Demo
Towards Natural Language Semantic Code Search 
How To Create Natural Language Semantic Search for Arbitrary Objects With Deep Learning (code, data)
CodeSearchNet Challenge: Evaluating the State of Semantic Code Search  
Code2vec
code2seq
Resources
Literature Review
https://github.com/src-d/awesome-machine-learning-on-source-code
Learning from Big Code
ML4Code
What is machine learning on code?
Research Groups
MAST from Edinburgh University 
SEAL from Queen’s University
Product
Aroma, code-to-code search and recommendation tool from Facebook
Codota, code suggestions tool for ides such as idea and bs code
https://blog.codota.com/python-plugins-for-intellij-idea/
TabNine is for python, codota itself does not support python
Deepcode.ai, vulnerability detection and fixing tool
Plugin for vs code and atom only, only work for github/bitbucket
Deepbugs for python
Plugin for idea
People
Hamel Husain
Machine Learning on Testing (MLonTest)
There are two major areas of machine learning on testing: 
How machine learning can help improve the tools of traditional software testing?
Given that traditional software testing tools may not be effective for machine learning models/workflows, what tools can we develop to test machine learning models?
Summary 
Area
Topics 
Applications 
ML for Testing 
Automated testing
Survey (Hourani, Hammad, and Lafi 2019) 
Generate test c programs for c compiler (Liu et al. 2019)
Test case generation (Kikuma et al. 2019)
Unit test generation 
Testing for ML
ML quality assurance
Quality assurance framework on ranking models (Murphy, Kaiser, and Arias 2006).
Adversarial testing 
Adversarial examples (Goodfellow, Shlens, and Szegedy 2018)
Consistency check
Resources 
Course 
Artificial Intelligence (AI) in Software Testing @Udemy
Research Groups
OpenAI
DeepMind
Articles
How Machine Learning and AI Bring a New Dimension to Software Testing
Machine Learning for Automation Testing
Test Automation in the World of AI & ML
How AI is changing test automation: 5 examples
What is Artificial Intelligence in Software Testing?
Machine Learning for Automation Testing
The top 7 test automation mistakes: How to avoid your next fail
Turning Testers into Machine Learning Engineers
Products
jtest
test.ai
TestIM
LinkedIn Resources
go/DeepCodeResource
Related Works
MLOps
The buzzword MLOps is about the toolings around the life cycle of machine learning, including data, model and code. The are quite a few open source tools, and here we want to focus the following:
DVC (Data Version Control): for data versioning
MLflow for experiment tracking
Some other tools are covered here
https://martinfowler.com/articles/cd4ml.html
https://towardsdatascience.com/enable-ml-experiments-4ba8c3c8bdc2


https://mlops.org/
MLOps on Azure enables you to track / version / audit / certify / re-use every asset in your ML lifecycle and provides orchestration services to streamline managing this lifecycle.
Another review about the term “MLOps”
Enterprise Readiness, MLOps and Lifecycle Management with Jordan Edwards
Proposal
Representation Learning for Source Code
The first step is to understand the semantics of source code. Compared to previous methods that rely on grammar analysis and string processing, our approach is to use machine learning techniques, specifically, embedding and representation learning, to learn the semantics of source code. We will build an MVP of semantic code search to showcase the efficacy of our approach. 
Toolings for experiment 
https://colab.research.google.com/drive/10OinT5ZNGtdLLQ9K399jlKgNgidxUbGP


References
Aggarwal, Karan, Mohammad Salameh, and Abram Hindle. 2015. “Using Machine Translation for Converting Python 2 to Python 3 Code.” PeerJ PrePrints.
Allamanis, Miltiadis, Hao Peng, and Charles Sutton. 2016. “A Convolutional Attention Network for Extreme Summarization of Source Code.” In International Conference on Machine Learning, 2091–2100.
Allamanis, Miltiadis, and Charles Sutton. 2014. “Mining Idioms from Source Code.” In Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, 472–483.
Allamanis, Miltos, Daniel Tarlow, Andrew Gordon, and Yi Wei. 2015. “Bimodal Modelling of Source Code and Natural Language.” In International Conference on Machine Learning, 2123–2132.
Barone, Antonio Valerio Miceli, and Rico Sennrich. 2017. “A Parallel Corpus of Python Functions and Documentation Strings for Automated Code Documentation and Code Generation.” ArXiv Preprint ArXiv:1707.02275.
Bhoopchand, Avishkar, Tim Rocktäschel, Earl Barr, and Sebastian Riedel. 2016. “Learning Python Code Suggestion with a Sparse Pointer Network.” ArXiv Preprint ArXiv:1611.08307.
Büch, Lutz, and Artur Andrzejak. 2019. “Learning-Based Recursive Aggregation of Abstract Syntax Trees for Code Clone Detection.” In 2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER), 95–104. IEEE.
Bunel, Rudy, Alban Desmaison, M. Pawan Kumar, Philip HS Torr, and Pushmeet Kohli. 2016. “Learning to Superoptimize Programs.” ArXiv Preprint ArXiv:1611.01787.
Fontana, Francesca Arcelli, Mika V. Mäntylä, Marco Zanoni, and Alessandro Marino. 2016. “Comparing and Experimenting Machine Learning Techniques for Code Smell Detection.” Empirical Software Engineering 21 (3): 1143–1191.
Goodfellow, Ian J., Jonathon Shlens, and Christian Szegedy. 2018. “Explaining and Harnessing Adversarial Examples. ArXiv.” Preprint.
Hellendoorn, Vincent J., Premkumar T. Devanbu, and Alberto Bacchelli. 2015. “Will They like This? Evaluating Code Contributions with Language Models.” In 2015 IEEE/ACM 12th Working Conference on Mining Software Repositories, 157–167. IEEE.
Hourani, Hussam, Ahmad Hammad, and Mohammad Lafi. 2019. “The Impact of Artificial Intelligence on Software Testing.” In 2019 IEEE Jordan International Joint Conference on Electrical Engineering and Information Technology (JEEIT), 565–570. IEEE.
Kikuma, Kazuhiro, Takeshi Yamada, Koki Sato, and Kiyoshi Ueda. 2019. “Preparation Method in Automated Test Case Generation Using Machine Learning.” In Proceedings of the Tenth International Symposium on Information and Communication Technology, 393–398.
Liu, Xiao, Xiaoting Li, Rupesh Prajapati, and Dinghao Wu. 2019. “Deepfuzz: Automatic Generation of Syntax Valid c Programs for Fuzz Testing.” In Proceedings of the AAAI Conference on Artificial Intelligence, 33:1044–1051.
Long, Fan, and Martin Rinard. 2016. “Automatic Patch Generation by Learning Correct Code.” In Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, 298–312.
Niu, Haoran, Iman Keivanloo, and Ying Zou. 2017. “Learning to Rank Code Examples for Code Search Engines.” Empirical Software Engineering 22 (1): 259–291.
Novielli, Nicole, Daniela Girardi, and Filippo Lanubile. 2018. “A Benchmark Study on Sentiment Analysis for Software Engineering Research.” In 2018 IEEE/ACM 15th International Conference on Mining Software Repositories (MSR), 364–375. IEEE.
Ray, Baishakhi, Vincent Hellendoorn, Saheel Godhane, Zhaopeng Tu, Alberto Bacchelli, and Premkumar Devanbu. 2016. “On the" Naturalness" of Buggy Code.” In 2016 IEEE/ACM 38th International Conference on Software Engineering (ICSE), 428–439. IEEE.
Russell, Rebecca, Louis Kim, Lei Hamilton, Tomo Lazovich, Jacob Harer, Onur Ozdemir, Paul Ellingwood, and Marc McConley. 2018. “Automated Vulnerability Detection in Source Code Using Deep Representation Learning.” In 2018 17th IEEE International Conference on Machine Learning and Applications (ICMLA), 757–762. IEEE.
